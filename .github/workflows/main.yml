name: Publish Release
on:
  push:
    tags:
      - 'v*'
    branches: 'release'
  workflow_dispatch:

env:
  APP_NAME: "GU-GPA-Calculator"


jobs:
  extract-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Commit Message
        id: commit_message
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: ${COMMIT_MSG}"
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV

      - name: Check Commit Message
        run: |
          # If the commit message doesn't start with "release: v", exit
          if [[ "${{ env.COMMIT_MSG }}" != release:\ v* ]]; then
            echo "Commit message does not start with 'release: v'. Exiting..."
            exit 1
          else
            echo "Commit message starts with 'release: v'. Continuing..."
          fi

      - name: Extract Version from Commit Message
        id: extract_version
        run: |
          # Extract the version number (e.g., v1.0.0) from the commit message
          VERSION=$(echo "${{ env.COMMIT_MSG }}" | grep -oP 'release: v\K[0-9]+\.[0-9]+\.[0-9]+')
          if [[ -z "$VERSION" ]]; then
            echo "No version found in commit message. Exiting..."
            exit 1
          fi
          echo "Version found: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
  publish-tauri:
    needs: extract-version
    if: always() && (needs.extract-version.outcome == 'success')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: GPA-Cal-v${{ env.VERSION }}
          releaseName: '${{ env.APP_NAME }} v${{ env.VERSION }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.settings.args }}
